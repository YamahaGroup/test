const cds = require('../../index'),
  { User } = cds,
  { decodeURI } = cds.utils
const libx = require('../../../libx/_runtime')
const LOG = cds.log('odata')
const express = require('express') // eslint-disable-line cds/no-missing-dependencies
const { isStream, stream } = require('../../../libx/odata/middleware/stream')

module.exports = function ODataAdapter(srv) {
  const router = express.Router()

  router.use((req, _, next) => {
    let u = req.user
    req.user = u instanceof User ? u : new User(u)

    let url = decodeURI(req.originalUrl)
    LOG && LOG(req.method, url, req.body || '')
    if (/\$batch/.test(req.url))
      req.on('dispatch', req => {
        let path = decodeURI(req._path)
        LOG && LOG('>', req.event, path, req._query || '')
        if (LOG._debug && req.query) LOG.debug(req.query)
      })

    next()
  })

  if (cds.env.features.odata_new_adapter) {
    // REVISIT: odata_new_adapter shouldn't influence odata_new_parser and cds_assert, but we'd need to set marker in cds.context or so to remove this
    cds.env.features.odata_new_parser = true
    cds.env.features.cds_assert = true
    // REVISIT: add middleware for negative cases?
    // service root
    router.use(/^\/$/, require('../../../libx/odata/middleware/service-document')(srv))
    router.use('/\\$metadata', require('../../../libx/odata/middleware/metadata')(srv))
    // parse
    router.use(require('../../../libx/odata/middleware/parse')(srv))
    // REVISIT do we want to build our own body parser logic?
    router.use((req, res, next) => {
      const method = req.method
      if (method !== 'PUT') {
        return express.json()(req, res, next)
      }

      const { _query: query } = req
      if (isStream(query)) {
        req.body = { value: req }
        return next(null, req, res)
      }

      // TODO: check if the raw body still exists, then we can remove deepCopy() in the handlers
      return express.json()(req, res, next)
    })

    // handle
    // REVISIT: with old adapter, we return 405 for HEAD requests -> check OData spec
    router.head('*', (_, res) => res.sendStatus(405))
    router.post('*', require('../../../libx/odata/middleware/operation')(srv)) //> action
    router.get('*', require('../../../libx/odata/middleware/operation')(srv)) //> function
    router.post('*', require('../../../libx/odata/middleware/create')(srv))
    router.get('*', stream(srv))
    router.get('*', require('../../../libx/odata/middleware/read')(srv))
    router.put('*', require('../../../libx/odata/middleware/update')(srv))
    router.patch('*', require('../../../libx/odata/middleware/update')(srv))
    router.delete('*', require('../../../libx/odata/middleware/delete')(srv))
    // error
    router.use(require('../../../libx/odata/middleware/error')(srv))
  } else {
    router.use(libx.to.odata_v4(srv))
  }

  return router
}
